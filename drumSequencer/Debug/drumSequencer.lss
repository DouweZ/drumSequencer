
drumSequencer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000034a  000003de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000034a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800104  00800104  000003e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000414  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000454  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000086d  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000312  00000000  00000000  00000d29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004da  00000000  00000000  0000103b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001518  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002d8  00000000  00000000  0000162c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000070d  00000000  00000000  00001904  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002011  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	66 c0       	rjmp	.+204    	; 0xfa <__vector_11>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 30       	cpi	r26, 0x09	; 9
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	cd d0       	rcall	.+410    	; 0x236 <main>
  9c:	54 c1       	rjmp	.+680    	; 0x346 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <ws2812_setleds>:
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
  a0:	9b 01       	movw	r18, r22
  a2:	22 0f       	add	r18, r18
  a4:	33 1f       	adc	r19, r19
  a6:	62 0f       	add	r22, r18
  a8:	73 1f       	adc	r23, r19
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
  aa:	3b 9a       	sbi	0x07, 3	; 7
  
  masklo	=~maskhi&ws2812_PORTREG;
  ac:	28 b1       	in	r18, 0x08	; 8
  ae:	27 7f       	andi	r18, 0xF7	; 247
  maskhi |=        ws2812_PORTREG;
  b0:	38 b1       	in	r19, 0x08	; 8
  b2:	38 60       	ori	r19, 0x08	; 8
  
  sreg_prev=SREG;
  b4:	4f b7       	in	r20, 0x3f	; 63
  cli();  
  b6:	f8 94       	cli

  while (datlen--) {
  b8:	61 15       	cp	r22, r1
  ba:	71 05       	cpc	r23, r1
  bc:	b1 f0       	breq	.+44     	; 0xea <loop54+0x22>
  be:	fc 01       	movw	r30, r24
  c0:	68 0f       	add	r22, r24
  c2:	79 1f       	adc	r23, r25
    curbyte=*data++;
  c4:	91 91       	ld	r25, Z+
    
    asm volatile(
  c6:	88 e0       	ldi	r24, 0x08	; 8

000000c8 <loop54>:
  c8:	38 b9       	out	0x08, r19	; 8
  ca:	00 00       	nop
  cc:	00 c0       	rjmp	.+0      	; 0xce <loop54+0x6>
  ce:	97 ff       	sbrs	r25, 7
  d0:	28 b9       	out	0x08, r18	; 8
  d2:	99 0f       	add	r25, r25
  d4:	00 00       	nop
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <loop54+0x10>
  d8:	00 c0       	rjmp	.+0      	; 0xda <loop54+0x12>
  da:	00 c0       	rjmp	.+0      	; 0xdc <loop54+0x14>
  dc:	28 b9       	out	0x08, r18	; 8
  de:	00 c0       	rjmp	.+0      	; 0xe0 <loop54+0x18>
  e0:	8a 95       	dec	r24
  e2:	91 f7       	brne	.-28     	; 0xc8 <loop54>
  maskhi |=        ws2812_PORTREG;
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
  e4:	e6 17       	cp	r30, r22
  e6:	f7 07       	cpc	r31, r23
  e8:	69 f7       	brne	.-38     	; 0xc4 <ws2812_setleds+0x24>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
  ea:	4f bf       	out	0x3f, r20	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	87 ec       	ldi	r24, 0xC7	; 199
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <loop54+0x28>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <loop54+0x2e>
  f6:	00 00       	nop
  f8:	08 95       	ret

000000fa <__vector_11>:




// OC1C (Pin13) is LED
ISR(TIMER1_COMPA_vect){	
  fa:	1f 92       	push	r1
  fc:	0f 92       	push	r0
  fe:	0f b6       	in	r0, 0x3f	; 63
 100:	0f 92       	push	r0
 102:	11 24       	eor	r1, r1
 104:	cf 92       	push	r12
 106:	df 92       	push	r13
 108:	ef 92       	push	r14
 10a:	ff 92       	push	r15
 10c:	0f 93       	push	r16
 10e:	2f 93       	push	r18
 110:	3f 93       	push	r19
 112:	4f 93       	push	r20
 114:	5f 93       	push	r21
 116:	6f 93       	push	r22
 118:	7f 93       	push	r23
 11a:	8f 93       	push	r24
 11c:	9f 93       	push	r25
 11e:	af 93       	push	r26
 120:	bf 93       	push	r27
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	ef 93       	push	r30
 128:	ff 93       	push	r31
				if(!(ms % ((120000/bpm)/subDiv))) //
 12a:	c0 90 04 01 	lds	r12, 0x0104	; 0x800104 <__data_end>
 12e:	d0 90 05 01 	lds	r13, 0x0105	; 0x800105 <__data_end+0x1>
 132:	e1 2c       	mov	r14, r1
 134:	f1 2c       	mov	r15, r1
 136:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <bpm>
 13a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <bpm+0x1>
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	50 e0       	ldi	r21, 0x00	; 0
 142:	60 ec       	ldi	r22, 0xC0	; 192
 144:	74 ed       	ldi	r23, 0xD4	; 212
 146:	81 e0       	ldi	r24, 0x01	; 1
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	bf d0       	rcall	.+382    	; 0x2ca <__divmodsi4>
 14c:	ca 01       	movw	r24, r20
 14e:	b9 01       	movw	r22, r18
 150:	00 91 00 01 	lds	r16, 0x0100	; 0x800100 <__data_start>
 154:	20 2f       	mov	r18, r16
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	40 e0       	ldi	r20, 0x00	; 0
 15a:	50 e0       	ldi	r21, 0x00	; 0
 15c:	b6 d0       	rcall	.+364    	; 0x2ca <__divmodsi4>
 15e:	c7 01       	movw	r24, r14
 160:	b6 01       	movw	r22, r12
 162:	b3 d0       	rcall	.+358    	; 0x2ca <__divmodsi4>
 164:	67 2b       	or	r22, r23
 166:	68 2b       	or	r22, r24
 168:	69 2b       	or	r22, r25
 16a:	e9 f4       	brne	.+58     	; 0x1a6 <__vector_11+0xac>
				{
					// Increase step until endStep and start over
					step = ((step < endStep) ? (step + 1) : 0);
 16c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <step>
 170:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <endStep>
 174:	28 17       	cp	r18, r24
 176:	10 f4       	brcc	.+4      	; 0x17c <__vector_11+0x82>
 178:	2f 5f       	subi	r18, 0xFF	; 255
 17a:	01 c0       	rjmp	.+2      	; 0x17e <__vector_11+0x84>
 17c:	20 e0       	ldi	r18, 0x00	; 0
 17e:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <step>
					PORTC |= ((1 & (sequenceOne >> step)) << PC0);
 182:	38 b1       	in	r19, 0x08	; 8
 184:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <sequenceOne>
 188:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <sequenceOne+0x1>
 18c:	02 c0       	rjmp	.+4      	; 0x192 <__vector_11+0x98>
 18e:	96 95       	lsr	r25
 190:	87 95       	ror	r24
 192:	2a 95       	dec	r18
 194:	e2 f7       	brpl	.-8      	; 0x18e <__vector_11+0x94>
 196:	81 70       	andi	r24, 0x01	; 1
 198:	83 2b       	or	r24, r19
 19a:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 19c:	80 e2       	ldi	r24, 0x20	; 32
 19e:	9e e4       	ldi	r25, 0x4E	; 78
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <__vector_11+0xa6>
					_delay_ms(5);
					PORTC = 0;
 1a4:	18 b8       	out	0x08, r1	; 8
					
				}
		if(ms == (120000/bpm)){ // 1000 ticks at 120bpm
 1a6:	c0 91 04 01 	lds	r28, 0x0104	; 0x800104 <__data_end>
 1aa:	d0 91 05 01 	lds	r29, 0x0105	; 0x800105 <__data_end+0x1>
 1ae:	6e 01       	movw	r12, r28
 1b0:	e1 2c       	mov	r14, r1
 1b2:	f1 2c       	mov	r15, r1
 1b4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <bpm>
 1b8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <bpm+0x1>
 1bc:	40 e0       	ldi	r20, 0x00	; 0
 1be:	50 e0       	ldi	r21, 0x00	; 0
 1c0:	60 ec       	ldi	r22, 0xC0	; 192
 1c2:	74 ed       	ldi	r23, 0xD4	; 212
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	80 d0       	rcall	.+256    	; 0x2ca <__divmodsi4>
 1ca:	c2 16       	cp	r12, r18
 1cc:	d3 06       	cpc	r13, r19
 1ce:	e4 06       	cpc	r14, r20
 1d0:	f5 06       	cpc	r15, r21
 1d2:	31 f4       	brne	.+12     	; 0x1e0 <__vector_11+0xe6>
			PORTB |= (1 << PB1);
 1d4:	29 9a       	sbi	0x05, 1	; 5
			ms = 0;
 1d6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 1da:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
 1de:	13 c0       	rjmp	.+38     	; 0x206 <__vector_11+0x10c>
		}

		else if(ms == 100){
 1e0:	c4 36       	cpi	r28, 0x64	; 100
 1e2:	d1 05       	cpc	r29, r1
 1e4:	59 f4       	brne	.+22     	; 0x1fc <__vector_11+0x102>
			PORTB &= ~(1 << PB1);
 1e6:	29 98       	cbi	0x05, 1	; 5
				
			ms++;
 1e8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 1ec:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 1f0:	01 96       	adiw	r24, 0x01	; 1
 1f2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 1f6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 1fa:	05 c0       	rjmp	.+10     	; 0x206 <__vector_11+0x10c>
		}
		else{
			ms++;
 1fc:	21 96       	adiw	r28, 0x01	; 1
 1fe:	d0 93 05 01 	sts	0x0105, r29	; 0x800105 <__data_end+0x1>
 202:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <__data_end>

	
	


}
 206:	ff 91       	pop	r31
 208:	ef 91       	pop	r30
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	bf 91       	pop	r27
 210:	af 91       	pop	r26
 212:	9f 91       	pop	r25
 214:	8f 91       	pop	r24
 216:	7f 91       	pop	r23
 218:	6f 91       	pop	r22
 21a:	5f 91       	pop	r21
 21c:	4f 91       	pop	r20
 21e:	3f 91       	pop	r19
 220:	2f 91       	pop	r18
 222:	0f 91       	pop	r16
 224:	ff 90       	pop	r15
 226:	ef 90       	pop	r14
 228:	df 90       	pop	r13
 22a:	cf 90       	pop	r12
 22c:	0f 90       	pop	r0
 22e:	0f be       	out	0x3f, r0	; 63
 230:	0f 90       	pop	r0
 232:	1f 90       	pop	r1
 234:	18 95       	reti

00000236 <main>:

int main(void)
{
 236:	cf 93       	push	r28
 238:	df 93       	push	r29
 23a:	cd b7       	in	r28, 0x3d	; 61
 23c:	de b7       	in	r29, 0x3e	; 62
 23e:	68 97       	sbiw	r28, 0x18	; 24
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	f8 94       	cli
 244:	de bf       	out	0x3e, r29	; 62
 246:	0f be       	out	0x3f, r0	; 63
 248:	cd bf       	out	0x3d, r28	; 61
	DDRB |= 0b110111;
 24a:	84 b1       	in	r24, 0x04	; 4
 24c:	87 63       	ori	r24, 0x37	; 55
 24e:	84 b9       	out	0x04, r24	; 4
	// Set up BPM counter
	//			7		6		5		4		3		2		1		0
	// ----------------------------------------------------------------------
	// TCCR1A :	COM1A1	COM1A0	COM1B1	COM1B0	COM1C1	COM1C0	WGM11	WGM10 // OC1C to toggle
	TCCR1A |=	0b00010000;
 250:	e0 e8       	ldi	r30, 0x80	; 128
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	80 61       	ori	r24, 0x10	; 16
 258:	80 83       	st	Z, r24
	// TCCR1C : ICNC1	ICES1	-		WGM13	WGM12	CS12	CS11	CS10 // WGM to CTC & PRESCALAR to 8
	TCCR1B |=	0b00001010;
 25a:	e1 e8       	ldi	r30, 0x81	; 129
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	8a 60       	ori	r24, 0x0A	; 10
 262:	80 83       	st	Z, r24
	TIMSK1 |=	(1 << OCIE1A);
 264:	ef e6       	ldi	r30, 0x6F	; 111
 266:	f0 e0       	ldi	r31, 0x00	; 0
 268:	80 81       	ld	r24, Z
 26a:	82 60       	ori	r24, 0x02	; 2
 26c:	80 83       	st	Z, r24
	
	DDRC |= 0b0111111;
 26e:	87 b1       	in	r24, 0x07	; 7
 270:	8f 63       	ori	r24, 0x3F	; 63
 272:	87 b9       	out	0x07, r24	; 7
	
	OCR1A = 999;	// 1kHz
 274:	87 ee       	ldi	r24, 0xE7	; 231
 276:	93 e0       	ldi	r25, 0x03	; 3
 278:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 27c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	/*
	sequence[0] = 0b0001;
	sequence[1] = 0b0000;
	sequence[2] = 0b0100;
	sequence[3] = 0b0001;*/
	sequenceOne = 0b00010011;
 280:	83 e1       	ldi	r24, 0x13	; 19
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <sequenceOne+0x1>
 288:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <sequenceOne>
	const struct cRGB ledBlue = {0,0,255};
	const struct cRGB ledWhite = {32,32,32};
	const struct cRGB ledBright = {255,255,255};
	

	ledarray[1] = ledRed;
 28c:	1c 82       	std	Y+4, r1	; 0x04
 28e:	1d 82       	std	Y+5, r1	; 0x05
 290:	1e 82       	std	Y+6, r1	; 0x06
	ledarray[2] = ledOrange;
 292:	1f 82       	std	Y+7, r1	; 0x07
 294:	8f ef       	ldi	r24, 0xFF	; 255
 296:	88 87       	std	Y+8, r24	; 0x08
 298:	19 86       	std	Y+9, r1	; 0x09
	ledarray[3] = ledRed;
 29a:	1a 86       	std	Y+10, r1	; 0x0a
 29c:	1b 86       	std	Y+11, r1	; 0x0b
 29e:	1c 86       	std	Y+12, r1	; 0x0c
	ledarray[4] = ledOrange;
 2a0:	1d 86       	std	Y+13, r1	; 0x0d
 2a2:	8e 87       	std	Y+14, r24	; 0x0e
 2a4:	1f 86       	std	Y+15, r1	; 0x0f
	ledarray[5] = ledOrange;
 2a6:	18 8a       	std	Y+16, r1	; 0x10
 2a8:	89 8b       	std	Y+17, r24	; 0x11
 2aa:	1a 8a       	std	Y+18, r1	; 0x12
	ledarray[6] = ledOrange;
 2ac:	1b 8a       	std	Y+19, r1	; 0x13
 2ae:	8c 8b       	std	Y+20, r24	; 0x14
 2b0:	1d 8a       	std	Y+21, r1	; 0x15
	ledarray[7] = ledOrange;
 2b2:	1e 8a       	std	Y+22, r1	; 0x16
 2b4:	8f 8b       	std	Y+23, r24	; 0x17
 2b6:	18 8e       	std	Y+24, r1	; 0x18
	ledarray[8] = ledOrange;
 2b8:	19 8e       	std	Y+25, r1	; 0x19
 2ba:	8a 8f       	std	Y+26, r24	; 0x1a
 2bc:	1b 8e       	std	Y+27, r1	; 0x1b

	
	ws2812_setleds(ledarray, 8); 
 2be:	68 e0       	ldi	r22, 0x08	; 8
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	ce 01       	movw	r24, r28
 2c4:	01 96       	adiw	r24, 0x01	; 1
 2c6:	ec de       	rcall	.-552    	; 0xa0 <ws2812_setleds>
		
		
		
		
	
    }
 2c8:	ff cf       	rjmp	.-2      	; 0x2c8 <main+0x92>

000002ca <__divmodsi4>:
 2ca:	05 2e       	mov	r0, r21
 2cc:	97 fb       	bst	r25, 7
 2ce:	16 f4       	brtc	.+4      	; 0x2d4 <__divmodsi4+0xa>
 2d0:	00 94       	com	r0
 2d2:	0f d0       	rcall	.+30     	; 0x2f2 <__negsi2>
 2d4:	57 fd       	sbrc	r21, 7
 2d6:	05 d0       	rcall	.+10     	; 0x2e2 <__divmodsi4_neg2>
 2d8:	14 d0       	rcall	.+40     	; 0x302 <__udivmodsi4>
 2da:	07 fc       	sbrc	r0, 7
 2dc:	02 d0       	rcall	.+4      	; 0x2e2 <__divmodsi4_neg2>
 2de:	46 f4       	brtc	.+16     	; 0x2f0 <__divmodsi4_exit>
 2e0:	08 c0       	rjmp	.+16     	; 0x2f2 <__negsi2>

000002e2 <__divmodsi4_neg2>:
 2e2:	50 95       	com	r21
 2e4:	40 95       	com	r20
 2e6:	30 95       	com	r19
 2e8:	21 95       	neg	r18
 2ea:	3f 4f       	sbci	r19, 0xFF	; 255
 2ec:	4f 4f       	sbci	r20, 0xFF	; 255
 2ee:	5f 4f       	sbci	r21, 0xFF	; 255

000002f0 <__divmodsi4_exit>:
 2f0:	08 95       	ret

000002f2 <__negsi2>:
 2f2:	90 95       	com	r25
 2f4:	80 95       	com	r24
 2f6:	70 95       	com	r23
 2f8:	61 95       	neg	r22
 2fa:	7f 4f       	sbci	r23, 0xFF	; 255
 2fc:	8f 4f       	sbci	r24, 0xFF	; 255
 2fe:	9f 4f       	sbci	r25, 0xFF	; 255
 300:	08 95       	ret

00000302 <__udivmodsi4>:
 302:	a1 e2       	ldi	r26, 0x21	; 33
 304:	1a 2e       	mov	r1, r26
 306:	aa 1b       	sub	r26, r26
 308:	bb 1b       	sub	r27, r27
 30a:	fd 01       	movw	r30, r26
 30c:	0d c0       	rjmp	.+26     	; 0x328 <__udivmodsi4_ep>

0000030e <__udivmodsi4_loop>:
 30e:	aa 1f       	adc	r26, r26
 310:	bb 1f       	adc	r27, r27
 312:	ee 1f       	adc	r30, r30
 314:	ff 1f       	adc	r31, r31
 316:	a2 17       	cp	r26, r18
 318:	b3 07       	cpc	r27, r19
 31a:	e4 07       	cpc	r30, r20
 31c:	f5 07       	cpc	r31, r21
 31e:	20 f0       	brcs	.+8      	; 0x328 <__udivmodsi4_ep>
 320:	a2 1b       	sub	r26, r18
 322:	b3 0b       	sbc	r27, r19
 324:	e4 0b       	sbc	r30, r20
 326:	f5 0b       	sbc	r31, r21

00000328 <__udivmodsi4_ep>:
 328:	66 1f       	adc	r22, r22
 32a:	77 1f       	adc	r23, r23
 32c:	88 1f       	adc	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	1a 94       	dec	r1
 332:	69 f7       	brne	.-38     	; 0x30e <__udivmodsi4_loop>
 334:	60 95       	com	r22
 336:	70 95       	com	r23
 338:	80 95       	com	r24
 33a:	90 95       	com	r25
 33c:	9b 01       	movw	r18, r22
 33e:	ac 01       	movw	r20, r24
 340:	bd 01       	movw	r22, r26
 342:	cf 01       	movw	r24, r30
 344:	08 95       	ret

00000346 <_exit>:
 346:	f8 94       	cli

00000348 <__stop_program>:
 348:	ff cf       	rjmp	.-2      	; 0x348 <__stop_program>
