
vactrol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001b6  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000143  00000000  00000000  000003ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001dc  00000000  00000000  0000052d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  0000070c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000171  00000000  00000000  00000764  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000021  00000000  00000000  000008d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000008f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e2       	ldi	r30, 0x28	; 40
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 75 00 	call	0xea	; 0xea <main>
  8e:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <adc_init>:
 */ 

#include <avr/io.h>

void adc_init(void){
	ADCSRA |= ((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0));  //16Mhz/128 = 125Khz the ADC reference clock
  96:	ea e7       	ldi	r30, 0x7A	; 122
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	87 60       	ori	r24, 0x07	; 7
  9e:	80 83       	st	Z, r24
	ADMUX |= (1<<REFS0);							//Voltage reference from Avcc (5v)
  a0:	ac e7       	ldi	r26, 0x7C	; 124
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	8c 91       	ld	r24, X
  a6:	80 64       	ori	r24, 0x40	; 64
  a8:	8c 93       	st	X, r24
	ADCSRA |= (1<<ADEN);							//Turn on ADC
  aa:	80 81       	ld	r24, Z
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);							//Do an initial conversion because this one is the slowest and to ensure that everything is up and running
  b0:	80 81       	ld	r24, Z
  b2:	80 64       	ori	r24, 0x40	; 64
  b4:	80 83       	st	Z, r24
  b6:	08 95       	ret

000000b8 <read_adc>:
}

volatile uint16_t read_adc(uint8_t channel){
	ADCW = 0;
  b8:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  bc:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	ADMUX &= 0xF0;                    //Clear the older channel that was read
  c0:	ec e7       	ldi	r30, 0x7C	; 124
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	90 81       	ld	r25, Z
  c6:	90 7f       	andi	r25, 0xF0	; 240
  c8:	90 83       	st	Z, r25
	ADMUX |= channel;                //Defines the new ADC channel to be read
  ca:	90 81       	ld	r25, Z
  cc:	89 2b       	or	r24, r25
  ce:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);                //Starts a new conversion
  d0:	ea e7       	ldi	r30, 0x7A	; 122
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	80 64       	ori	r24, 0x40	; 64
  d8:	80 83       	st	Z, r24
	while(ADCSRA & (1<<ADSC));            //Wait until the conversion is done
  da:	80 81       	ld	r24, Z
  dc:	86 fd       	sbrc	r24, 6
  de:	fd cf       	rjmp	.-6      	; 0xda <read_adc+0x22>
	return ADCW;                    //Returns the ADC value of the chosen channel
  e0:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  e4:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  e8:	08 95       	ret

000000ea <main>:
}
*/

int main(void)
{
	DDRB |= (1 << DDB3);
  ea:	23 9a       	sbi	0x04, 3	; 4
	DDRD |= (1 << DDB3);
  ec:	53 9a       	sbi	0x0a, 3	; 10
	DDRB |= (1 << DDB5);
  ee:	25 9a       	sbi	0x04, 5	; 4
	
	
	
	TCCR2A	|=(1 << WGM20)	/* PHASE CORRECT PWM */
  f0:	e0 eb       	ldi	r30, 0xB0	; 176
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	80 81       	ld	r24, Z
  f6:	81 6a       	ori	r24, 0xA1	; 161
  f8:	80 83       	st	Z, r24
	| (1 << COM2B1)			/* Clear on up count, set on down count (NON INVERTING?) */
	| (1 << COM2A1);		/**/
	TCCR2B	|= (1 << CS22);	/* No prescalar */
  fa:	e1 eb       	ldi	r30, 0xB1	; 177
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	84 60       	ori	r24, 0x04	; 4
 102:	80 83       	st	Z, r24
	
	//TIMSK2 |= (1 << TOIE2); // Interrupt overflow interrupt
	adc_init();
 104:	0e 94 4b 00 	call	0x96	; 0x96 <adc_init>
    while (1) 
    {
		pitch = (read_adc(1) / 4);
		
		
		OCR2B = pitch;
 108:	c4 eb       	ldi	r28, 0xB4	; 180
 10a:	d0 e0       	ldi	r29, 0x00	; 0
	
	uint16_t pitch;
    /* Replace with your application code */
    while (1) 
    {
		pitch = (read_adc(1) / 4);
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 5c 00 	call	0xb8	; 0xb8 <read_adc>
 112:	99 23       	and	r25, r25
 114:	0c f4       	brge	.+2      	; 0x118 <main+0x2e>
 116:	03 96       	adiw	r24, 0x03	; 3
 118:	95 95       	asr	r25
 11a:	87 95       	ror	r24
 11c:	95 95       	asr	r25
 11e:	87 95       	ror	r24
		
		
		OCR2B = pitch;
 120:	88 83       	st	Y, r24
		

		
		
	
    }
 122:	f4 cf       	rjmp	.-24     	; 0x10c <main+0x22>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
